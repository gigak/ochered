#include <iostream>
#include <stdlib.h>
#include <locale>


using namespace std;

//! Структура - элемент списка
  struct Node 
    {
       int x;//!< данные
       Node *Next; //!< указатель на следующее звено
    };


//! Класс списка
class List
{
    Node *Head,*Tail; //!< Указатели на начало списка и на конец
public:
     List():Head(NULL),Tail(NULL){}; //!< Инициализация указателей как пустых
     ~List(); //!< Деструктор для освобождения памяти от всего что будет
     void Add(int x); //!< Функция заполнения структуры Node и добавления её в список как элемента
     void Show(); //!< Функция отображения списка List 
	 void del(); //!< Функция изъятия элемента
 };


List::~List() //!< очищаем память с помощью деструктора
{
 Node *temp=Head; //!< Временный указатель на начало списка
 while (temp!=NULL) //!< Пока в списке что-то есть

   {
     temp=Head->Next; //!< Резерв адреса на следующий элемент списка
     delete Head;  //!< Освобождение памяти от первой структуры как элемента списка

     Head=temp;  //!< Сдвиг начала на следующий адрес, который берем из резерва

   } 
} 

//! ФУНКЦИЯ ЗАПОЛНЕНИЯ ИНФОРМАЦИОННЫХ ПОЛЕЙ СТРУКТУРЫ NODE И ДОБАВЛЕНИЯ ЭТОЙ СТРУКТУРЫ В СПИСОК
void List::Add(int x)
{
    Node *temp=new Node; //!< Выделение памяти для нового звена списка
    temp->x=x; //!< Временное запоминание принятого параметра x
    temp->Next=NULL; //!< Указание, что следующее звено новосозданной структуры пока пустое

    if (Head!=NULL) //!< Если список не пуст 
    {
        Tail->Next=temp; //!< Указание, что следующее звено списка это новосозданная структура
        Tail=temp;      
    }     else Head=Tail=temp; //!< Если список не пуст, добавление первого элемента
} 

//! ФУНКЦИЯ ОТОБРАЖЕНИЯ СПИСКА НА ЭКРАНЕ
void List::Show()
{
    Node *temp=Head; //!< Временный указатель на начало списка
     while (temp!=NULL) //!< Пока в списке что-то встречается
     {
         cout<<temp->x<<" "; //!< Выводим значения из списка на экран
         temp=temp->Next; //!< Сдвигаем указатель на начало на адрес следующего элемента
     }
    cout<<endl;
}

//! ФУНКЦИЯ ИЗЪЯТИЯ ЭЛЕМЕНТА ИЗ ОЧЕРЕДИ 
void List::del()
{
    if (Head!=NULL)  //!< Если список не пустой
    {
        Node *temp=Head; //!< Обращаемся к началу списка с помощью вспомогательного указателя
        cout<<"Элемент "<<Head->x<<" удален"<<endl;
        Head=Head->Next; //!< Сдвиг начала списка
        delete temp; //!< Освобождение памяти от предыдущего звена списка
    }
}

void main()
{

	setlocale(LC_ALL, "rus");
   List lst;
  // system("CLS");
       lst.Add(100);  //100
       lst.Add(200);  //100   200
       lst.Add(300);  //100   200   300
          lst.Show();  // =100 200 300
            lst.del();   // =200   300 (100 Первым вошел, Первым ушел)
            cout<<endl; //просто чтоб лучше видно было


      lst.Add(111);  //200   300   111
      lst.Add(222);  //200   300   111   222  
          lst.Show();  // = 200 300 111 222
      lst.Add(999);  //200   300   111   222   999
         lst.del();    // = 300 111 222 999 (200 Вторым пришел, вторым ушел)
         lst.del();    // = 111 222 999
         cout<<endl; //просто чтоб лучше видно было

 lst.Show();    //  = 111 222 999

   system("PAUSE");
}